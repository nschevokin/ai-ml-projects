{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nschevokin/ai-ml-projects/blob/main/pet_classification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d41535fd",
      "metadata": {
        "id": "d41535fd"
      },
      "source": [
        "# Assignment Module 2: Pet Classification\n",
        "\n",
        "The goal of this assignment is to implement a neural network that classifies images of 37 breeds of cats and dogs from the [Oxford-IIIT-Pet dataset](https://www.robots.ox.ac.uk/~vgg/data/pets/). The assignment is divided into two parts: first, you will be asked to implement from scratch your own neural network for image classification; then, you will fine-tune a pretrained network provided by PyTorch."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b1476550",
      "metadata": {
        "id": "b1476550"
      },
      "source": [
        "## Dataset\n",
        "\n",
        "The following cells contain the code to download and access the dataset you will be using in this assignment. Note that, although this dataset features each and every image from [Oxford-IIIT-Pet](https://www.robots.ox.ac.uk/~vgg/data/pets/), it uses a different train-val-test split than the original authors."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "91101a0d",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "91101a0d",
        "outputId": "c2024784-7575-4113-fa58-c2b9e9c0c3b4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'ipcv-assignment-2'...\n",
            "remote: Enumerating objects: 7371, done.\u001b[K\n",
            "remote: Total 7371 (delta 0), reused 0 (delta 0), pack-reused 7371 (from 1)\u001b[K\n",
            "Receiving objects: 100% (7371/7371), 753.77 MiB | 35.19 MiB/s, done.\n",
            "Updating files: 100% (7396/7396), done.\n"
          ]
        }
      ],
      "source": [
        "!git clone https://github.com/CVLAB-Unibo/ipcv-assignment-2.git"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "0d8fb0d2",
      "metadata": {
        "id": "0d8fb0d2"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "from torch import Tensor\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import DataLoader, Dataset\n",
        "from torch.optim.lr_scheduler import OneCycleLR\n",
        "from torchvision import transforms, models\n",
        "import torch.nn.functional as F\n",
        "from pathlib import Path\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "import copy\n",
        "from typing import List, Tuple, Dict\n",
        "\n",
        "import os\n",
        "from google.colab import drive\n",
        "from torch.nn.utils import clip_grad_norm_\n",
        "from torch import amp"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "b99c9929",
      "metadata": {
        "id": "b99c9929"
      },
      "outputs": [],
      "source": [
        "class OxfordPetDataset(Dataset):\n",
        "    def __init__(self, split: str, transform=None) -> None:\n",
        "        super().__init__()\n",
        "\n",
        "        self.root = Path(\"ipcv-assignment-2\") / \"dataset\"\n",
        "        self.split = split\n",
        "        self.names, self.labels = self._get_names_and_labels()\n",
        "        self.transform = transform\n",
        "\n",
        "    def __len__(self) -> int:\n",
        "        return len(self.labels)\n",
        "\n",
        "    def __getitem__(self, idx) -> Tuple[Tensor, int]:\n",
        "        img_path = self.root / \"images\" / f\"{self.names[idx]}.jpg\"\n",
        "        img = Image.open(img_path).convert(\"RGB\")\n",
        "        label = self.labels[idx]\n",
        "\n",
        "        if self.transform:\n",
        "            img = self.transform(img)\n",
        "\n",
        "        return img, label\n",
        "\n",
        "    def get_num_classes(self) -> int:\n",
        "        return max(self.labels) + 1\n",
        "\n",
        "    def _get_names_and_labels(self) -> Tuple[List[str], List[int]]:\n",
        "        names = []\n",
        "        labels = []\n",
        "\n",
        "        with open(self.root / \"annotations\" / f\"{self.split}.txt\") as f:\n",
        "            for line in f:\n",
        "                name, label = line.replace(\"\\n\", \"\").split(\" \")\n",
        "                names.append(name),\n",
        "                labels.append(int(label) - 1)\n",
        "\n",
        "        return names, labels"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b4e655bd",
      "metadata": {
        "id": "b4e655bd"
      },
      "source": [
        "## Part 1: design your own network\n",
        "\n",
        "Your goal is to implement a convolutional neural network for image classification and train it from scratch on `OxfordPetDataset`. You should consider yourselves satisfied once you obtain a classification accuracy on the test split of ~60%. You are free to achieve this however you want, except for a few rules you must follow:\n",
        "\n",
        "- Compile this notebook by displaying the results obtained by the best model you found throughout your experimentation; then show how, by removing some of its components, its performance drops. In other words, do an *ablation study* to prove that your design choices have a positive impact on the final result.\n",
        "\n",
        "- Do not instantiate an off-the-self PyTorch network. Instead, construct your network as a composition of existing PyTorch layers. In more concrete terms, you can use e.g. `torch.nn.Linear`, but you cannot use e.g. `torchvision.models.alexnet`.\n",
        "\n",
        "- Show your results and ablations with plots, tables, images, etc. â€” the clearer, the better.\n",
        "\n",
        "Don't be too concerned with your model performance: the ~60% is just to give you an idea of when to stop. Keep in mind that a thoroughly justified model with lower accuracy will be rewarded more points than a poorly experimentally validated model with higher accuracy."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "KszqX-ccMg83",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KszqX-ccMg83",
        "outputId": "d56b6bd6-a507-4f75-a257-d70890fe4da2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using device: cuda\n",
            "Number of classes: 37\n",
            "Dataset sizes: {'train': 3669, 'val': 1834, 'test': 1846}\n"
          ]
        }
      ],
      "source": [
        "# Set the random seeds fixed\n",
        "seed = 42\n",
        "torch.manual_seed(seed)\n",
        "if torch.cuda.is_available():\n",
        "    torch.cuda.manual_seed_all(seed)\n",
        "np.random.seed(seed)\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(f\"Using device: {device}\")\n",
        "\n",
        "# Data Augmentation and Transformation\n",
        "data_transforms = {\n",
        "    'train': transforms.Compose([\n",
        "        transforms.Resize(256),\n",
        "        transforms.RandomResizedCrop(224),\n",
        "        transforms.RandomHorizontalFlip(),\n",
        "        transforms.ToTensor()\n",
        "    ]),\n",
        "    'val': transforms.Compose([\n",
        "        transforms.Resize(256),\n",
        "        transforms.CenterCrop(224),\n",
        "        transforms.ToTensor()\n",
        "    ]),\n",
        "    'test': transforms.Compose([\n",
        "        transforms.Resize(256),\n",
        "        transforms.CenterCrop(224),\n",
        "        transforms.ToTensor()\n",
        "    ])\n",
        "}\n",
        "\n",
        "# Instantiate the datasets for each split\n",
        "image_datasets = {\n",
        "    'train': OxfordPetDataset(split='train', transform=data_transforms['train']),\n",
        "    'val': OxfordPetDataset(split='val', transform=data_transforms['val']),\n",
        "    'test': OxfordPetDataset(split='test', transform=data_transforms['test'])\n",
        "}\n",
        "\n",
        "# Create DataLoaders\n",
        "dataloaders = {\n",
        "    x: DataLoader(image_datasets[x], batch_size=32, shuffle=(x=='train'), num_workers=2)\n",
        "    for x in ['train', 'val', 'test']\n",
        "}\n",
        "\n",
        "dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val', 'test']}\n",
        "num_classes = image_datasets['train'].get_num_classes()\n",
        "\n",
        "print(f\"Number of classes: {num_classes}\")\n",
        "print(f\"Dataset sizes: {dataset_sizes}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# =========================\n",
        "# Pre-activation ResNet (basic blocks)\n",
        "# =========================\n",
        "class PreActBasicBlock(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch, stride=1):\n",
        "        super().__init__()\n",
        "        self.bn1  = nn.BatchNorm2d(in_ch)\n",
        "        self.conv1= nn.Conv2d(in_ch, out_ch, 3, stride=stride, padding=1, bias=False)\n",
        "        self.bn2  = nn.BatchNorm2d(out_ch)\n",
        "        self.conv2= nn.Conv2d(out_ch, out_ch, 3, stride=1, padding=1, bias=False)\n",
        "        self.proj = None\n",
        "        if stride != 1 or in_ch != out_ch:\n",
        "            self.proj = nn.Conv2d(in_ch, out_ch, 1, stride=stride, bias=False)\n",
        "\n",
        "    def forward(self, x):\n",
        "        out = self.conv1(F.relu(self.bn1(x), inplace=True))\n",
        "        out = self.conv2(F.relu(self.bn2(out), inplace=True))\n",
        "        shortcut = x if self.proj is None else self.proj(x)\n",
        "        return F.relu(out + shortcut, inplace=True)\n",
        "\n",
        "def make_layer(block, in_ch, out_ch, num_blocks, stride_first):\n",
        "    layers = [block(in_ch, out_ch, stride=stride_first)]\n",
        "    for _ in range(1, num_blocks):\n",
        "        layers.append(block(out_ch, out_ch, stride=1))\n",
        "    return nn.Sequential(*layers)\n",
        "\n",
        "class MyResNet(nn.Module):\n",
        "    def __init__(self, num_classes=37, depths=(2,2,2,2)):\n",
        "        super().__init__()\n",
        "        self.stem = nn.Sequential(\n",
        "            nn.Conv2d(3, 64, 3, stride=1, padding=1, bias=False),\n",
        "            nn.BatchNorm2d(64),\n",
        "            nn.ReLU(inplace=True),\n",
        "        )\n",
        "        self.layer1 = make_layer(PreActBasicBlock,  64,  64, depths[0], stride_first=1)\n",
        "        self.layer2 = make_layer(PreActBasicBlock,  64, 128, depths[1], stride_first=2)\n",
        "        self.layer3 = make_layer(PreActBasicBlock, 128, 256, depths[2], stride_first=2)\n",
        "        self.layer4 = make_layer(PreActBasicBlock, 256, 512, depths[3], stride_first=2)\n",
        "        self.pool   = nn.AdaptiveAvgPool2d(1)\n",
        "        self.fc     = nn.Linear(512, num_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.stem(x)\n",
        "        x = self.layer1(x); x = self.layer2(x); x = self.layer3(x); x = self.layer4(x)\n",
        "        x = self.pool(x).flatten(1)\n",
        "        return self.fc(x)\n",
        "\n",
        "# =========================\n",
        "# Optimiser + cosine warm-up scheduler\n",
        "# =========================\n",
        "def build_opt_and_sched(model, lr, wd, total_steps, warmup_ratio=0.05, use_sgd=False):\n",
        "    if use_sgd:\n",
        "        optimizer = optim.SGD(model.parameters(), lr=lr, momentum=0.9, nesterov=True, weight_decay=wd)\n",
        "    else:\n",
        "        optimizer = optim.AdamW(model.parameters(), lr=lr, weight_decay=wd)\n",
        "\n",
        "    warmup_steps = max(1, int(warmup_ratio * total_steps))\n",
        "    def lr_lambda(step):\n",
        "        if step < warmup_steps:\n",
        "            return step / max(1, warmup_steps)\n",
        "        prog = (step - warmup_steps) / max(1, total_steps - warmup_steps)\n",
        "        return 0.5 * (1.0 + math.cos(math.pi * prog))  # cosine to 0\n",
        "    scheduler = optim.lr_scheduler.LambdaLR(optimizer, lr_lambda=lr_lambda)\n",
        "    return optimizer, scheduler\n",
        "\n",
        "# =========================\n",
        "# Training\n",
        "# =========================\n",
        "USE_MIXUP_CUTMIX = False\n",
        "MAX_GRAD_NORM    = 1.0\n",
        "SCHEDULER_PER_STEP = True\n",
        "def train_model(model: nn.Module,\n",
        "                dataloaders: Dict[str, DataLoader],\n",
        "                criterion: nn.Module,\n",
        "                optimizer: optim.Optimizer,\n",
        "                scheduler: optim.lr_scheduler._LRScheduler,\n",
        "                num_epochs: int = 25) -> Tuple[nn.Module, Dict[str, list]]:\n",
        "\n",
        "    use_amp = torch.cuda.is_available()\n",
        "    start_time = time.time()\n",
        "    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "    best_acc = 0.0\n",
        "    history = {'train_loss': [], 'train_acc': [], 'val_loss': [], 'val_acc': []}\n",
        "\n",
        "    use_amp = torch.cuda.is_available()\n",
        "    scaler  = amp.GradScaler('cuda') if use_amp else None\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        print(\"-\" * 20)\n",
        "        print(f'Epoch {epoch+1}/{num_epochs}')\n",
        "\n",
        "        for phase in ['train', 'val']:\n",
        "            model.train() if phase == 'train' else model.eval()\n",
        "\n",
        "            running_loss = 0.0\n",
        "            running_corrects = 0\n",
        "            seen = 0\n",
        "\n",
        "            for inputs, labels in dataloaders[phase]:\n",
        "                inputs = inputs.to(device, non_blocking=True)\n",
        "\n",
        "                if isinstance(labels, tuple):\n",
        "                    labels = tuple(t.to(device, non_blocking=True) if torch.is_tensor(t) else t for t in labels)\n",
        "                    labels_for_acc = labels[0]\n",
        "                else:\n",
        "                    labels = labels.to(device, non_blocking=True)\n",
        "                    labels_for_acc = labels\n",
        "\n",
        "                optimizer.zero_grad(set_to_none=True)\n",
        "\n",
        "                with torch.set_grad_enabled(phase == 'train'):\n",
        "                    with amp.autocast('cuda', enabled=use_amp):\n",
        "                        outputs = model(inputs)\n",
        "                        if phase == 'train' and USE_MIXUP_CUTMIX:\n",
        "                            loss = mixed_ce(criterion, outputs, labels)\n",
        "                        else:\n",
        "                            loss = criterion(outputs, labels_for_acc)\n",
        "                    if phase == 'train':\n",
        "                        if use_amp:\n",
        "                            scaler.scale(loss).backward()\n",
        "                            scaler.unscale_(optimizer)\n",
        "                            clip_grad_norm_(model.parameters(), MAX_GRAD_NORM)\n",
        "                            scaler.step(optimizer)\n",
        "                            scaler.update()\n",
        "                        else:\n",
        "                            loss.backward()\n",
        "                            clip_grad_norm_(model.parameters(), MAX_GRAD_NORM)\n",
        "                            optimizer.step()\n",
        "\n",
        "                        if scheduler is not None and SCHEDULER_PER_STEP:\n",
        "                            scheduler.step()\n",
        "\n",
        "                # stats\n",
        "                preds = outputs.argmax(1).detach()\n",
        "                running_loss += loss.item() * inputs.size(0)\n",
        "                running_corrects += (preds == labels_for_acc).sum().item()\n",
        "                seen += inputs.size(0)\n",
        "\n",
        "            # epoch metrics\n",
        "            epoch_loss = running_loss / max(1, seen)\n",
        "            epoch_acc  = running_corrects / max(1, seen)\n",
        "\n",
        "            if phase == 'train':\n",
        "                history['train_loss'].append(epoch_loss)\n",
        "                history['train_acc'].append(epoch_acc)\n",
        "                if scheduler is not None and not SCHEDULER_PER_STEP:\n",
        "                    scheduler.step()\n",
        "            else:\n",
        "                history['val_loss'].append(epoch_loss)\n",
        "                history['val_acc'].append(epoch_acc)\n",
        "                if epoch_acc > best_acc:\n",
        "                    best_acc = epoch_acc\n",
        "                    best_model_wts = copy.deepcopy(model.state_dict())\n",
        "\n",
        "            print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')\n",
        "\n",
        "    time_elapsed = time.time() - start_time\n",
        "    print(f'Training complete in {time_elapsed // 60:.0f}m {time_elapsed % 60:.0f}s')\n",
        "    print(f'Best val Acc: {best_acc:4f}')\n",
        "\n",
        "    model.load_state_dict(best_model_wts)\n",
        "    return model, history\n",
        "\n",
        "# =========================\n",
        "# Eval + plotting\n",
        "# =========================\n",
        "def evaluate_model(model: nn.Module, dataloader: DataLoader) -> float:\n",
        "    model.eval()\n",
        "    running_corrects = 0\n",
        "    with torch.no_grad():\n",
        "        for inputs, labels in dataloader:\n",
        "            inputs, labels = inputs.to(device), labels.to(device)\n",
        "            outputs = model(inputs)\n",
        "            _, preds = torch.max(outputs, 1)\n",
        "            running_corrects += torch.sum(preds == labels)\n",
        "    accuracy = running_corrects.double() / len(dataloader.dataset)\n",
        "    return accuracy.item()\n",
        "\n",
        "def plot_history(history: Dict[str, list], title: str):\n",
        "    plt.figure(figsize=(12, 5))\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(history['train_acc'], label='Train Accuracy')\n",
        "    plt.plot(history['val_acc'], label='Validation Accuracy')\n",
        "    plt.title(f'{title} - Accuracy'); plt.xlabel('Epochs'); plt.ylabel('Accuracy'); plt.legend(); plt.grid(True)\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(history['train_loss'], label='Train Loss')\n",
        "    plt.plot(history['val_loss'], label='Validation Loss')\n",
        "    plt.title(f'{title} - Loss'); plt.xlabel('Epochs'); plt.ylabel('Loss'); plt.legend(); plt.grid(True)\n",
        "    plt.suptitle(title)\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "suFA0hZDpQSR"
      },
      "id": "suFA0hZDpQSR",
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dn_QFRE35sXz",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dn_QFRE35sXz",
        "outputId": "a172e9d9-c0b3-4d6c-8e45-76403c75b131"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "No pre-trained model found â€” training from scratch.\n",
            "--------------------\n",
            "Epoch 1/80\n",
            "train Loss: 3.5479 Acc: 0.0531\n",
            "val Loss: 3.5958 Acc: 0.0665\n",
            "--------------------\n",
            "Epoch 2/80\n",
            "train Loss: 3.4003 Acc: 0.0976\n",
            "val Loss: 3.5109 Acc: 0.0889\n",
            "--------------------\n",
            "Epoch 3/80\n",
            "train Loss: 3.3477 Acc: 0.1058\n",
            "val Loss: 3.3775 Acc: 0.0872\n",
            "--------------------\n",
            "Epoch 4/80\n",
            "train Loss: 3.3127 Acc: 0.1123\n",
            "val Loss: 3.3448 Acc: 0.1134\n",
            "--------------------\n",
            "Epoch 5/80\n",
            "train Loss: 3.2532 Acc: 0.1374\n",
            "val Loss: 3.3278 Acc: 0.1298\n",
            "--------------------\n",
            "Epoch 6/80\n",
            "train Loss: 3.2234 Acc: 0.1472\n",
            "val Loss: 3.5382 Acc: 0.1140\n",
            "--------------------\n",
            "Epoch 7/80\n",
            "train Loss: 3.1992 Acc: 0.1477\n",
            "val Loss: 3.3722 Acc: 0.1194\n",
            "--------------------\n",
            "Epoch 8/80\n",
            "train Loss: 3.1251 Acc: 0.1712\n",
            "val Loss: 3.3392 Acc: 0.1281\n",
            "--------------------\n",
            "Epoch 9/80\n",
            "train Loss: 3.1333 Acc: 0.1742\n",
            "val Loss: 3.3701 Acc: 0.1205\n",
            "--------------------\n",
            "Epoch 10/80\n",
            "train Loss: 3.1252 Acc: 0.1761\n",
            "val Loss: 3.2511 Acc: 0.1510\n",
            "--------------------\n",
            "Epoch 11/80\n",
            "train Loss: 3.0280 Acc: 0.2066\n",
            "val Loss: 3.3515 Acc: 0.1341\n",
            "--------------------\n",
            "Epoch 12/80\n",
            "train Loss: 3.0240 Acc: 0.2156\n",
            "val Loss: 3.3549 Acc: 0.1363\n",
            "--------------------\n",
            "Epoch 13/80\n",
            "train Loss: 2.9880 Acc: 0.2186\n",
            "val Loss: 3.2346 Acc: 0.1701\n",
            "--------------------\n",
            "Epoch 14/80\n",
            "train Loss: 2.9487 Acc: 0.2311\n",
            "val Loss: 3.0032 Acc: 0.2017\n",
            "--------------------\n",
            "Epoch 15/80\n",
            "train Loss: 2.8539 Acc: 0.2584\n",
            "val Loss: 6.4382 Acc: 0.1161\n",
            "--------------------\n",
            "Epoch 16/80\n",
            "train Loss: 2.8219 Acc: 0.2766\n",
            "val Loss: 3.9300 Acc: 0.1728\n",
            "--------------------\n",
            "Epoch 17/80\n",
            "train Loss: 2.7646 Acc: 0.2911\n",
            "val Loss: 4.0356 Acc: 0.1859\n",
            "--------------------\n",
            "Epoch 18/80\n",
            "train Loss: 2.7044 Acc: 0.3069\n",
            "val Loss: 3.0736 Acc: 0.2230\n",
            "--------------------\n",
            "Epoch 19/80\n",
            "train Loss: 2.6673 Acc: 0.3129\n",
            "val Loss: 3.0314 Acc: 0.2503\n",
            "--------------------\n",
            "Epoch 20/80\n",
            "train Loss: 2.6364 Acc: 0.3385\n",
            "val Loss: 2.9870 Acc: 0.2677\n",
            "--------------------\n",
            "Epoch 21/80\n",
            "train Loss: 2.5817 Acc: 0.3404\n",
            "val Loss: 2.8707 Acc: 0.2699\n",
            "--------------------\n",
            "Epoch 22/80\n",
            "train Loss: 2.5609 Acc: 0.3423\n",
            "val Loss: 3.0412 Acc: 0.1919\n",
            "--------------------\n",
            "Epoch 23/80\n",
            "train Loss: 2.4871 Acc: 0.3780\n",
            "val Loss: 3.3580 Acc: 0.2585\n",
            "--------------------\n",
            "Epoch 24/80\n",
            "train Loss: 2.4772 Acc: 0.3881\n",
            "val Loss: 2.9420 Acc: 0.3206\n",
            "--------------------\n",
            "Epoch 25/80\n",
            "train Loss: 2.4117 Acc: 0.4072\n",
            "val Loss: 2.5694 Acc: 0.3964\n",
            "--------------------\n",
            "Epoch 26/80\n",
            "train Loss: 2.3382 Acc: 0.4345\n",
            "val Loss: 2.7002 Acc: 0.3315\n",
            "--------------------\n",
            "Epoch 27/80\n",
            "train Loss: 2.2841 Acc: 0.4538\n",
            "val Loss: 2.8843 Acc: 0.2966\n",
            "--------------------\n",
            "Epoch 28/80\n",
            "train Loss: 2.2037 Acc: 0.4778\n",
            "val Loss: 2.8171 Acc: 0.3353\n",
            "--------------------\n",
            "Epoch 29/80\n",
            "train Loss: 2.1427 Acc: 0.5135\n",
            "val Loss: 2.2712 Acc: 0.4662\n",
            "--------------------\n",
            "Epoch 30/80\n",
            "train Loss: 2.1148 Acc: 0.5323\n",
            "val Loss: 2.3222 Acc: 0.4498\n",
            "--------------------\n",
            "Epoch 31/80\n",
            "train Loss: 2.0935 Acc: 0.5367\n",
            "val Loss: 2.5178 Acc: 0.4613\n",
            "--------------------\n",
            "Epoch 32/80\n",
            "train Loss: 2.0326 Acc: 0.5544\n",
            "val Loss: 2.6093 Acc: 0.3773\n",
            "--------------------\n",
            "Epoch 33/80\n",
            "train Loss: 1.9804 Acc: 0.5666\n",
            "val Loss: 2.4171 Acc: 0.4640\n",
            "--------------------\n",
            "Epoch 34/80\n",
            "train Loss: 1.9889 Acc: 0.5705\n",
            "val Loss: 2.1489 Acc: 0.5262\n",
            "--------------------\n",
            "Epoch 35/80\n",
            "train Loss: 1.9169 Acc: 0.5955\n",
            "val Loss: 2.2259 Acc: 0.5147\n",
            "--------------------\n",
            "Epoch 36/80\n",
            "train Loss: 1.8922 Acc: 0.6094\n",
            "val Loss: 2.0768 Acc: 0.5502\n",
            "--------------------\n",
            "Epoch 37/80\n",
            "train Loss: 1.8666 Acc: 0.6154\n",
            "val Loss: 2.0014 Acc: 0.5682\n",
            "--------------------\n",
            "Epoch 38/80\n",
            "train Loss: 1.8483 Acc: 0.6176\n",
            "val Loss: 2.2287 Acc: 0.5311\n",
            "--------------------\n",
            "Epoch 39/80\n",
            "train Loss: 1.7652 Acc: 0.6579\n",
            "val Loss: 2.0372 Acc: 0.5725\n",
            "--------------------\n",
            "Epoch 40/80\n",
            "train Loss: 1.7925 Acc: 0.6430\n",
            "val Loss: 2.0917 Acc: 0.5807\n",
            "--------------------\n",
            "Epoch 41/80\n",
            "train Loss: 1.7548 Acc: 0.6615\n",
            "val Loss: 1.9774 Acc: 0.5823\n",
            "--------------------\n",
            "Epoch 42/80\n",
            "train Loss: 1.7043 Acc: 0.6849\n",
            "val Loss: 2.2959 Acc: 0.5115\n",
            "--------------------\n",
            "Epoch 43/80\n",
            "train Loss: 1.7043 Acc: 0.6748\n",
            "val Loss: 2.1399 Acc: 0.5911\n",
            "--------------------\n",
            "Epoch 44/80\n",
            "train Loss: 1.6609 Acc: 0.7035\n",
            "val Loss: 1.8934 Acc: 0.6227\n",
            "--------------------\n",
            "Epoch 45/80\n",
            "train Loss: 1.6162 Acc: 0.7116\n",
            "val Loss: 1.8440 Acc: 0.6412\n",
            "--------------------\n",
            "Epoch 46/80\n",
            "train Loss: 1.6011 Acc: 0.7209\n",
            "val Loss: 1.8322 Acc: 0.6336\n",
            "--------------------\n",
            "Epoch 47/80\n",
            "train Loss: 1.5825 Acc: 0.7269\n",
            "val Loss: 1.7670 Acc: 0.6532\n",
            "--------------------\n",
            "Epoch 48/80\n",
            "train Loss: 1.5596 Acc: 0.7381\n",
            "val Loss: 1.8845 Acc: 0.6412\n",
            "--------------------\n",
            "Epoch 49/80\n",
            "train Loss: 1.5226 Acc: 0.7550\n",
            "val Loss: 1.8496 Acc: 0.6330\n",
            "--------------------\n",
            "Epoch 50/80\n",
            "train Loss: 1.5053 Acc: 0.7533\n",
            "val Loss: 1.8488 Acc: 0.6576\n",
            "--------------------\n",
            "Epoch 51/80\n",
            "train Loss: 1.5049 Acc: 0.7607\n",
            "val Loss: 1.7423 Acc: 0.6728\n",
            "--------------------\n",
            "Epoch 52/80\n",
            "train Loss: 1.4731 Acc: 0.7757\n",
            "val Loss: 1.7729 Acc: 0.6641\n",
            "--------------------\n",
            "Epoch 53/80\n",
            "train Loss: 1.4672 Acc: 0.7822\n",
            "val Loss: 1.7446 Acc: 0.6794\n",
            "--------------------\n",
            "Epoch 54/80\n",
            "train Loss: 1.4499 Acc: 0.7771\n",
            "val Loss: 1.7362 Acc: 0.6865\n",
            "--------------------\n",
            "Epoch 55/80\n",
            "train Loss: 1.4078 Acc: 0.8016\n",
            "val Loss: 1.7025 Acc: 0.6892\n",
            "--------------------\n",
            "Epoch 56/80\n",
            "train Loss: 1.4209 Acc: 0.7931\n",
            "val Loss: 1.7354 Acc: 0.6838\n",
            "--------------------\n",
            "Epoch 57/80\n",
            "train Loss: 1.3755 Acc: 0.8092\n",
            "val Loss: 1.6775 Acc: 0.7017\n",
            "--------------------\n",
            "Epoch 58/80\n",
            "train Loss: 1.3983 Acc: 0.8016\n",
            "val Loss: 1.6681 Acc: 0.6930\n",
            "--------------------\n",
            "Epoch 59/80\n",
            "train Loss: 1.3584 Acc: 0.8207\n",
            "val Loss: 1.6241 Acc: 0.7165\n",
            "--------------------\n",
            "Epoch 60/80\n",
            "train Loss: 1.3286 Acc: 0.8277\n",
            "val Loss: 1.6598 Acc: 0.7088\n",
            "--------------------\n",
            "Epoch 61/80\n",
            "train Loss: 1.3353 Acc: 0.8215\n",
            "val Loss: 1.6310 Acc: 0.7181\n",
            "--------------------\n",
            "Epoch 62/80\n",
            "train Loss: 1.3256 Acc: 0.8258\n",
            "val Loss: 1.6182 Acc: 0.7225\n",
            "--------------------\n",
            "Epoch 63/80\n",
            "train Loss: 1.2953 Acc: 0.8367\n",
            "val Loss: 1.6179 Acc: 0.7328\n",
            "--------------------\n",
            "Epoch 64/80\n",
            "train Loss: 1.2748 Acc: 0.8493\n",
            "val Loss: 1.6097 Acc: 0.7317\n",
            "--------------------\n",
            "Epoch 65/80\n",
            "train Loss: 1.2551 Acc: 0.8575\n",
            "val Loss: 1.6097 Acc: 0.7285\n",
            "--------------------\n",
            "Epoch 66/80\n",
            "train Loss: 1.2907 Acc: 0.8408\n",
            "val Loss: 1.6110 Acc: 0.7192\n",
            "--------------------\n",
            "Epoch 67/80\n",
            "train Loss: 1.2644 Acc: 0.8479\n",
            "val Loss: 1.5864 Acc: 0.7356\n",
            "--------------------\n",
            "Epoch 68/80\n",
            "train Loss: 1.2329 Acc: 0.8635\n",
            "val Loss: 1.6090 Acc: 0.7334\n",
            "--------------------\n",
            "Epoch 69/80\n",
            "train Loss: 1.2296 Acc: 0.8637\n",
            "val Loss: 1.5940 Acc: 0.7290\n",
            "--------------------\n",
            "Epoch 70/80\n",
            "train Loss: 1.2194 Acc: 0.8689\n",
            "val Loss: 1.5767 Acc: 0.7432\n",
            "--------------------\n",
            "Epoch 71/80\n",
            "train Loss: 1.2188 Acc: 0.8692\n",
            "val Loss: 1.5625 Acc: 0.7448\n",
            "--------------------\n",
            "Epoch 72/80\n",
            "train Loss: 1.2175 Acc: 0.8686\n",
            "val Loss: 1.5798 Acc: 0.7394\n",
            "--------------------\n",
            "Epoch 73/80\n",
            "train Loss: 1.2187 Acc: 0.8651\n",
            "val Loss: 1.5702 Acc: 0.7394\n",
            "--------------------\n",
            "Epoch 74/80\n",
            "train Loss: 1.2133 Acc: 0.8640\n",
            "val Loss: 1.5668 Acc: 0.7432\n",
            "--------------------\n",
            "Epoch 75/80\n",
            "train Loss: 1.2016 Acc: 0.8760\n",
            "val Loss: 1.5557 Acc: 0.7475\n",
            "--------------------\n",
            "Epoch 76/80\n",
            "train Loss: 1.2021 Acc: 0.8692\n",
            "val Loss: 1.5656 Acc: 0.7415\n",
            "--------------------\n",
            "Epoch 77/80\n",
            "train Loss: 1.2003 Acc: 0.8774\n",
            "val Loss: 1.5690 Acc: 0.7415\n",
            "--------------------\n",
            "Epoch 78/80\n",
            "train Loss: 1.1984 Acc: 0.8746\n",
            "val Loss: 1.5692 Acc: 0.7372\n",
            "--------------------\n",
            "Epoch 79/80\n",
            "train Loss: 1.1754 Acc: 0.8814\n",
            "val Loss: 1.5641 Acc: 0.7432\n",
            "--------------------\n",
            "Epoch 80/80\n",
            "train Loss: 1.2016 Acc: 0.8727\n",
            "val Loss: 1.5684 Acc: 0.7334\n",
            "Training complete in 101m 54s\n",
            "Best val Acc: 0.747546\n",
            "Model saved to /content/drive/MyDrive/colab_models/custom_resnet_weights.pth\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "import os, torch\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive', force_remount=True)\n",
        "\n",
        "# Training parameters\n",
        "NUM_EPOCHS_CUSTOM = 80\n",
        "MAX_LEARNING_RATE = 1e-3\n",
        "WEIGHT_DECAY = 1e-4\n",
        "LABEL_SMOOTHING = 0.1\n",
        "\n",
        "# Choose a save location in your Drive\n",
        "MODEL_DIR = '/content/drive/MyDrive/colab_models'\n",
        "os.makedirs(MODEL_DIR, exist_ok=True)\n",
        "MODEL_SAVE_PATH = os.path.join(MODEL_DIR, 'custom_resnet_weights.pth')\n",
        "\n",
        "# Build the model\n",
        "model = MyResNet(num_classes=num_classes, depths=(2,2,2,2)).to(device)\n",
        "\n",
        "# If the weights file exists, load it; otherwise start from scratch\n",
        "if os.path.isfile(MODEL_SAVE_PATH):\n",
        "    print(f\"Loading existing model from {MODEL_SAVE_PATH}\")\n",
        "    model.load_state_dict(torch.load(MODEL_SAVE_PATH, map_location=device))\n",
        "else:\n",
        "    print(\"No pre-trained model found â€” training from scratch.\")\n",
        "\n",
        "# Loss function with label smoothing\n",
        "criterion = nn.CrossEntropyLoss(label_smoothing=LABEL_SMOOTHING)\n",
        "\n",
        "# AdamW optimizer for better weight decay handling\n",
        "optimizer_custom = optim.AdamW(model.parameters(),\n",
        "                               lr=MAX_LEARNING_RATE,\n",
        "                               weight_decay=WEIGHT_DECAY)\n",
        "\n",
        "# Scheduler\n",
        "steps_per_epoch = len(dataloaders['train'])\n",
        "scheduler = OneCycleLR(optimizer_custom,\n",
        "                       max_lr=MAX_LEARNING_RATE,\n",
        "                       steps_per_epoch=steps_per_epoch,\n",
        "                       epochs=NUM_EPOCHS_CUSTOM)\n",
        "\n",
        "# Train\n",
        "model, history = train_model(model, dataloaders, criterion,\n",
        "                             optimizer_custom, scheduler,\n",
        "                             num_epochs=NUM_EPOCHS_CUSTOM)\n",
        "\n",
        "# Save trained model to Drive\n",
        "torch.save(model.state_dict(), MODEL_SAVE_PATH)\n",
        "print(f\"Model saved to {MODEL_SAVE_PATH}\")\n",
        "\n",
        "# Plot training history\n",
        "plot_history(history, \"Custom ResNet Training\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 2: fine-tune an existing network\n",
        "\n",
        "Your goal is to fine-tune a pretrained ResNet-18 model on `OxfordPetDataset`. Use the implementation provided by PyTorch, i.e. the opposite of part 1. Specifically, use the PyTorch ResNet-18 model pretrained on ImageNet-1K (V1). Divide your fine-tuning into two parts:\n",
        "\n",
        "2A. First, fine-tune the ResNet-18 with the same training hyperparameters you used for your best model in part 1.\n",
        "\n",
        "2B. Then, tweak the training hyperparameters in order to increase the accuracy on the test split. Justify your choices by analyzing the training plots and/or citing sources that guided you in your decisions â€” papers, blog posts, YouTube videos, or whatever else you may find useful. You should consider yourselves satisfied once you obtain a classification accuracy on the test split of ~90%."
      ],
      "metadata": {
        "id": "j40zzDncucEL"
      },
      "id": "j40zzDncucEL"
    },
    {
      "cell_type": "code",
      "source": [
        "import os, copy, random\n",
        "import torch, torch.nn as nn, torch.optim as optim\n",
        "from torchvision import transforms\n",
        "from torchvision.models import resnet18, ResNet18_Weights\n",
        "from torch.optim.lr_scheduler import OneCycleLR\n",
        "\n",
        "# ---- Repro ----\n",
        "def set_seed(s=42):\n",
        "    random.seed(s); torch.manual_seed(s); torch.cuda.manual_seed_all(s)\n",
        "    torch.backends.cudnn.deterministic = True; torch.backends.cudnn.benchmark = False\n",
        "set_seed(42)\n",
        "\n",
        "# ---- Config ----\n",
        "NUM_CLASSES = 37\n",
        "HEAD_WARMUP_EPOCHS = 4\n",
        "FINETUNE_EPOCHS    = 40\n",
        "PATIENCE           = 8\n",
        "\n",
        "# LRs for SGD (head > backbone)\n",
        "LR_WARMUP_HEAD = 1e-2\n",
        "LR_BACKBONE_FT = 3e-3\n",
        "LR_HEAD_FT     = 9e-3\n",
        "\n",
        "MOMENTUM       = 0.9\n",
        "NESTEROV       = True\n",
        "WEIGHT_DECAY   = 1e-4\n",
        "DROPOUT_P      = 0.2\n",
        "LABEL_SMOOTH_WARMUP = 0.10\n",
        "LABEL_SMOOTH_FT     = 0.10\n",
        "GRAD_CLIP_NORM = 1.0   # clip to stabilise\n",
        "\n",
        "# ---- Augmentations (256px) ----\n",
        "from torchvision.transforms import RandAugment\n",
        "train_tfms = transforms.Compose([\n",
        "    transforms.RandomResizedCrop(256, scale=(0.72, 1.0)),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    RandAugment(num_ops=2, magnitude=9),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize([0.485,0.456,0.406],[0.229,0.224,0.225]),\n",
        "    transforms.RandomErasing(p=0.25)\n",
        "])\n",
        "val_tfms = transforms.Compose([\n",
        "    transforms.Resize(288),\n",
        "    transforms.CenterCrop(256),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize([0.485,0.456,0.406],[0.229,0.224,0.225]),\n",
        "])\n",
        "\n",
        "# apply to your datasets\n",
        "dataloaders[\"train\"].dataset.transform = train_tfms\n",
        "dataloaders[\"val\"].dataset.transform   = val_tfms\n",
        "\n",
        "# ---- Model helpers ----\n",
        "def build_resnet18_with_head(num_classes=NUM_CLASSES, dropout_p=DROPOUT_P):\n",
        "    m = resnet18(weights=ResNet18_Weights.IMAGENET1K_V1)\n",
        "    in_f = m.fc.in_features\n",
        "    m.fc = nn.Sequential(nn.Dropout(dropout_p), nn.Linear(in_f, num_classes))\n",
        "    return m\n",
        "\n",
        "def freeze_all(m):\n",
        "    for p in m.parameters(): p.requires_grad = False\n",
        "\n",
        "def unfreeze_head(m):\n",
        "    for p in m.fc.parameters(): p.requires_grad = True\n",
        "\n",
        "def unfreeze_blocks(m, blocks=(\"layer3\",\"layer4\")):\n",
        "    for name, module in m.named_children():\n",
        "        if name in blocks:\n",
        "            for p in module.parameters(): p.requires_grad = True\n",
        "\n",
        "def param_groups(m, lr_backbone, lr_head):\n",
        "    bb, head = [], []\n",
        "    for n,p in m.named_parameters():\n",
        "        if not p.requires_grad: continue\n",
        "        (head if n.startswith(\"fc\") else bb).append(p)\n",
        "    return [{\"params\": bb, \"lr\": lr_backbone},\n",
        "            {\"params\": head, \"lr\": lr_head}]\n",
        "\n",
        "# ---- Trainer with early stopping + grad clipping ----\n",
        "def train_with_early_stopping(model, dataloaders, criterion, optimizer, scheduler,\n",
        "                              num_epochs, patience, device):\n",
        "    best_wts = copy.deepcopy(model.state_dict()); best_acc = 0.0; no_improve = 0\n",
        "    for epoch in range(num_epochs):\n",
        "        print(f\"Epoch {epoch+1}/{num_epochs}\")\n",
        "        for phase in (\"train\",\"val\"):\n",
        "            model.train() if phase==\"train\" else model.eval()\n",
        "            run_loss, run_correct, total = 0.0, 0, 0\n",
        "            for x,y in dataloaders[phase]:\n",
        "                x,y = x.to(device), y.to(device)\n",
        "                optimizer.zero_grad()\n",
        "                with torch.set_grad_enabled(phase==\"train\"):\n",
        "                    logits = model(x)\n",
        "                    loss = criterion(logits, y)\n",
        "                    _, preds = logits.max(1)\n",
        "                    if phase==\"train\":\n",
        "                        loss.backward()\n",
        "                        torch.nn.utils.clip_grad_norm_(model.parameters(), GRAD_CLIP_NORM)\n",
        "                        optimizer.step(); scheduler.step()\n",
        "                run_loss += loss.item() * x.size(0)\n",
        "                run_correct += preds.eq(y).sum().item()\n",
        "                total += y.size(0)\n",
        "            ep_loss = run_loss/total; ep_acc = run_correct/total\n",
        "            print(f\"{phase} Loss: {ep_loss:.4f} Acc: {ep_acc:.4f}\")\n",
        "            if phase==\"val\":\n",
        "                if ep_acc > best_acc: best_acc = ep_acc; best_wts = copy.deepcopy(model.state_dict()); no_improve = 0\n",
        "                else: no_improve += 1\n",
        "        if no_improve >= patience:\n",
        "            print(f\"Early stopping at epoch {epoch+1} (patience {patience}).\"); break\n",
        "    model.load_state_dict(best_wts)\n",
        "    return model, best_acc\n",
        "\n",
        "# ---- Run: Stage 1 (head warm-up, SGD) ----\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model = build_resnet18_with_head().to(device)\n",
        "freeze_all(model); unfreeze_head(model)\n",
        "\n",
        "crit_warm = nn.CrossEntropyLoss(label_smoothing=LABEL_SMOOTH_WARMUP)\n",
        "opt_warm  = optim.SGD(model.fc.parameters(), lr=LR_WARMUP_HEAD,\n",
        "                      momentum=MOMENTUM, nesterov=NESTEROV, weight_decay=WEIGHT_DECAY)\n",
        "steps = len(dataloaders[\"train\"])\n",
        "sch_warm  = OneCycleLR(opt_warm, max_lr=LR_WARMUP_HEAD, epochs=HEAD_WARMUP_EPOCHS, steps_per_epoch=steps)\n",
        "\n",
        "model, _ = train_with_early_stopping(model, dataloaders, crit_warm, opt_warm, sch_warm,\n",
        "                                     num_epochs=HEAD_WARMUP_EPOCHS, patience=HEAD_WARMUP_EPOCHS, device=device)\n",
        "\n",
        "# ---- Run\n",
        "freeze_all(model); unfreeze_head(model); unfreeze_blocks(model, (\"layer3\",\"layer4\"))\n",
        "pg = param_groups(model, LR_BACKBONE_FT, LR_HEAD_FT)\n",
        "\n",
        "crit_ft = nn.CrossEntropyLoss(label_smoothing=LABEL_SMOOTH_FT)\n",
        "opt_ft  = optim.SGD(pg, momentum=MOMENTUM, nesterov=NESTEROV, weight_decay=WEIGHT_DECAY)\n",
        "sch_ft  = OneCycleLR(opt_ft, max_lr=[LR_BACKBONE_FT, LR_HEAD_FT], epochs=FINETUNE_EPOCHS, steps_per_epoch=steps)\n",
        "\n",
        "model, best_val_acc = train_with_early_stopping(model, dataloaders, crit_ft, opt_ft, sch_ft,\n",
        "                                                num_epochs=FINETUNE_EPOCHS, patience=PATIENCE, device=device)\n",
        "print(f\"Best Validation Accuracy: {best_val_acc:.4f}\")\n",
        "\n",
        "# ---- Save best model ----\n",
        "MODEL_DIR = '/content/drive/MyDrive/colab_models'; os.makedirs(MODEL_DIR, exist_ok=True)\n",
        "MODEL_SAVE_PATH = os.path.join(MODEL_DIR, 'resnet18_2B_best.pth')\n",
        "torch.save(model.state_dict(), MODEL_SAVE_PATH)\n",
        "print(f\"Best model saved to {MODEL_SAVE_PATH}\")\n",
        "\n",
        "@torch.no_grad()\n",
        "def eval_tta(m, dl, device, tta=True):\n",
        "    m.eval(); correct=total=0\n",
        "    for x,y in dl:\n",
        "        x,y = x.to(device), y.to(device)\n",
        "        logits = m(x)\n",
        "        if tta:\n",
        "            logits = (logits + m(torch.flip(x, dims=[-1]))) / 2.0\n",
        "        correct += logits.argmax(1).eq(y).sum().item()\n",
        "        total += y.size(0)\n",
        "    return correct/total\n",
        "\n",
        "val_plain = eval_tta(model, dataloaders[\"val\"], device, tta=False)\n",
        "val_tta   = eval_tta(model, dataloaders[\"val\"], device, tta=True)\n",
        "print(f\"Val acc (plain): {val_plain:.4f} | Val acc (TTA): {val_tta:.4f}\")\n"
      ],
      "metadata": {
        "id": "u3dye7fs-deP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "61e1c0cd-2ebe-470e-9f24-dd9cbb54628d"
      },
      "id": "u3dye7fs-deP",
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/4\n",
            "train Loss: 3.4112 Acc: 0.1439\n",
            "val Loss: 2.4678 Acc: 0.5393\n",
            "Epoch 2/4\n",
            "train Loss: 2.2499 Acc: 0.5683\n",
            "val Loss: 1.6271 Acc: 0.7715\n",
            "Epoch 3/4\n",
            "train Loss: 1.7700 Acc: 0.6975\n",
            "val Loss: 1.3848 Acc: 0.8315\n",
            "Epoch 4/4\n",
            "train Loss: 1.6382 Acc: 0.7362\n",
            "val Loss: 1.3381 Acc: 0.8479\n",
            "Epoch 1/40\n",
            "train Loss: 1.6055 Acc: 0.7555\n",
            "val Loss: 1.3089 Acc: 0.8484\n",
            "Epoch 2/40\n",
            "train Loss: 1.5547 Acc: 0.7678\n",
            "val Loss: 1.2693 Acc: 0.8550\n",
            "Epoch 3/40\n",
            "train Loss: 1.4864 Acc: 0.7841\n",
            "val Loss: 1.2281 Acc: 0.8599\n",
            "Epoch 4/40\n",
            "train Loss: 1.4331 Acc: 0.7910\n",
            "val Loss: 1.1977 Acc: 0.8659\n",
            "Epoch 5/40\n",
            "train Loss: 1.3657 Acc: 0.8152\n",
            "val Loss: 1.1786 Acc: 0.8730\n",
            "Epoch 6/40\n",
            "train Loss: 1.3157 Acc: 0.8234\n",
            "val Loss: 1.1556 Acc: 0.8702\n",
            "Epoch 7/40\n",
            "train Loss: 1.2987 Acc: 0.8272\n",
            "val Loss: 1.1448 Acc: 0.8768\n",
            "Epoch 8/40\n",
            "train Loss: 1.2576 Acc: 0.8403\n",
            "val Loss: 1.1438 Acc: 0.8762\n",
            "Epoch 9/40\n",
            "train Loss: 1.2344 Acc: 0.8531\n",
            "val Loss: 1.1393 Acc: 0.8730\n",
            "Epoch 10/40\n",
            "train Loss: 1.2109 Acc: 0.8542\n",
            "val Loss: 1.1248 Acc: 0.8784\n",
            "Epoch 11/40\n",
            "train Loss: 1.1926 Acc: 0.8607\n",
            "val Loss: 1.1142 Acc: 0.8844\n",
            "Epoch 12/40\n",
            "train Loss: 1.1898 Acc: 0.8602\n",
            "val Loss: 1.1065 Acc: 0.8888\n",
            "Epoch 13/40\n",
            "train Loss: 1.1544 Acc: 0.8820\n",
            "val Loss: 1.1207 Acc: 0.8877\n",
            "Epoch 14/40\n",
            "train Loss: 1.1495 Acc: 0.8812\n",
            "val Loss: 1.0996 Acc: 0.8882\n",
            "Epoch 15/40\n",
            "train Loss: 1.1320 Acc: 0.8806\n",
            "val Loss: 1.0977 Acc: 0.8904\n",
            "Epoch 16/40\n",
            "train Loss: 1.1238 Acc: 0.8836\n",
            "val Loss: 1.0927 Acc: 0.8904\n",
            "Epoch 17/40\n",
            "train Loss: 1.0938 Acc: 0.8967\n",
            "val Loss: 1.1020 Acc: 0.8888\n",
            "Epoch 18/40\n",
            "train Loss: 1.0932 Acc: 0.8972\n",
            "val Loss: 1.0936 Acc: 0.8893\n",
            "Epoch 19/40\n",
            "train Loss: 1.0870 Acc: 0.9000\n",
            "val Loss: 1.0867 Acc: 0.8844\n",
            "Epoch 20/40\n",
            "train Loss: 1.0740 Acc: 0.9008\n",
            "val Loss: 1.0894 Acc: 0.8871\n",
            "Epoch 21/40\n",
            "train Loss: 1.0607 Acc: 0.9131\n",
            "val Loss: 1.0859 Acc: 0.8904\n",
            "Epoch 22/40\n",
            "train Loss: 1.0640 Acc: 0.9106\n",
            "val Loss: 1.0834 Acc: 0.8937\n",
            "Epoch 23/40\n",
            "train Loss: 1.0436 Acc: 0.9150\n",
            "val Loss: 1.0829 Acc: 0.8882\n",
            "Epoch 24/40\n",
            "train Loss: 1.0528 Acc: 0.9095\n",
            "val Loss: 1.0751 Acc: 0.8937\n",
            "Epoch 25/40\n",
            "train Loss: 1.0324 Acc: 0.9177\n",
            "val Loss: 1.0804 Acc: 0.8877\n",
            "Epoch 26/40\n",
            "train Loss: 1.0330 Acc: 0.9193\n",
            "val Loss: 1.0867 Acc: 0.8860\n",
            "Epoch 27/40\n",
            "train Loss: 1.0282 Acc: 0.9185\n",
            "val Loss: 1.0700 Acc: 0.8909\n",
            "Epoch 28/40\n",
            "train Loss: 1.0364 Acc: 0.9163\n",
            "val Loss: 1.0709 Acc: 0.8839\n",
            "Epoch 29/40\n",
            "train Loss: 1.0283 Acc: 0.9182\n",
            "val Loss: 1.0730 Acc: 0.8953\n",
            "Epoch 30/40\n",
            "train Loss: 1.0051 Acc: 0.9283\n",
            "val Loss: 1.0620 Acc: 0.8915\n",
            "Epoch 31/40\n",
            "train Loss: 1.0031 Acc: 0.9294\n",
            "val Loss: 1.0825 Acc: 0.8920\n",
            "Epoch 32/40\n",
            "train Loss: 1.0087 Acc: 0.9294\n",
            "val Loss: 1.0672 Acc: 0.8915\n",
            "Epoch 33/40\n",
            "train Loss: 1.0076 Acc: 0.9253\n",
            "val Loss: 1.0674 Acc: 0.8959\n",
            "Epoch 34/40\n",
            "train Loss: 0.9966 Acc: 0.9302\n",
            "val Loss: 1.0606 Acc: 0.8915\n",
            "Epoch 35/40\n",
            "train Loss: 0.9956 Acc: 0.9294\n",
            "val Loss: 1.0662 Acc: 0.8931\n",
            "Epoch 36/40\n",
            "train Loss: 1.0024 Acc: 0.9289\n",
            "val Loss: 1.0613 Acc: 0.8899\n",
            "Epoch 37/40\n",
            "train Loss: 0.9964 Acc: 0.9335\n",
            "val Loss: 1.0624 Acc: 0.8926\n",
            "Epoch 38/40\n",
            "train Loss: 1.0015 Acc: 0.9305\n",
            "val Loss: 1.0616 Acc: 0.8942\n",
            "Epoch 39/40\n",
            "train Loss: 1.0103 Acc: 0.9270\n",
            "val Loss: 1.0649 Acc: 0.8937\n",
            "Epoch 40/40\n",
            "train Loss: 0.9920 Acc: 0.9330\n",
            "val Loss: 1.0639 Acc: 0.8904\n",
            "Best Validation Accuracy: 0.8959\n",
            "Best model saved to /content/drive/MyDrive/colab_models/resnet18_2B_best.pth\n",
            "Val acc (plain): 0.8959 | Val acc (TTA): 0.8948\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.16"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}